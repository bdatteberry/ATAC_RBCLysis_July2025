
#!/usr/bin/env Rscript
# =============================================================================
#              Directory_creation.r  (AUTO-PATHS + DYNAMIC DATE)
# =============================================================================
# - Always uses "today" in America/Los_Angeles (unless overridden)
# - Creates <ATACseq_Analysis>/R/<DATE> and other folders
# - Writes scripts/00_auto_paths.R that recomputes "today" when sourced
# - Optionally bootstraps scripts/Function_list.r (placeholder)
# - Writes paths.Rds snapshot
#
# Optional reproducibility override (either one):
#   options(project.date_override = "YYYY-MM-DD")
#   PROJECT_DATE=YYYY-MM-DD Rscript Directory_creation.r
# =============================================================================

suppressPackageStartupMessages({
  # base R only
})

# ---- Config / Default root ---------------------------------------------------
if (!exists("main_wd")) {
  main_wd <- getOption(
    "project.main_wd",
    Sys.getenv("PROJECT_ROOT", "/Users/brandiatteberry/Desktop/Bioinformatics/ATACseq_Analysis")
  )
}
main_wd <- sub("/+$", "", main_wd)

# ---- Date handling (LA "today" or override) ----------------------------------
tz <- getOption("project.tz", "America/Los_Angeles")
override <- getOption("project.date_override", Sys.getenv("PROJECT_DATE", ""))

project_current_date <- function() {
  d <- if (nzchar(override)) {
    as.Date(override)
  } else {
    # compute today in requested tz using base R
    as.Date(format(as.POSIXct(Sys.time(), tz = tz), "%Y-%m-%d"))
  }
  toupper(format(d, "%d%b%y"))
}
current_date <- project_current_date()

# ---- Helpers -----------------------------------------------------------------
create_dir <- function(path) {
  if (!dir.exists(path)) dir.create(path, recursive = TRUE)
  invisible(path)
}

# Add _<DATE> before extension (or at end if no ext)
stamp <- function(path, tag = current_date) {
  dirp <- dirname(path)
  base <- basename(path)
  ext  <- tools::file_ext(base)
  stem <- if (nzchar(ext)) tools::file_path_sans_ext(base) else base
  dated <- if (nzchar(ext)) paste0(stem, "_", tag, ".", ext) else paste0(stem, "_", tag)
  file.path(dirp, dated)
}

# ---- Core working dirs -------------------------------------------------------
macs_wd           <- file.path(main_wd, "macs")
scale_wd          <- file.path(main_wd, "scale")
deseq_wd          <- file.path(main_wd, "R")
output_wd         <- file.path(deseq_wd, current_date)
homer_wd          <- file.path(deseq_wd, "Homer", current_date)
seq_stats_wd      <- file.path(main_wd, "seq_stats")
rep_overlap_wd    <- file.path(output_wd, "replicate_normalized")
pre_deseq_reps_wd <- file.path(rep_overlap_wd, "pre_DESeq_counts")
homer_r_wd        <- file.path(rep_overlap_wd, "HOMER_post_processing")

# ---- Script & Snapshot dirs --------------------------------------------------
scripts_wd   <- file.path(main_wd, "scripts")
snapshots_wd <- file.path(scripts_wd, "_snapshots", current_date)

# Optional DESeq/merged dirs
merged_norm_wd                <- file.path(output_wd, "merged_normalized")
deseq_dds_folder              <- file.path(merged_norm_wd, "DESeq_dds_output")
deseq_dds_folder_reps_overlap <- file.path(rep_overlap_wd, "DESeq_dds_output_reps_overlap")

# Files produced by split/count steps (so other scripts know where to look)
file_a <- file.path(scale_wd, "consensus_peaks_first_six_columns.txt")
file_b <- file.path(scale_wd, "consensus_peaks_sorted_bam_columns.txt")

# ---- Make the directories ----------------------------------------------------
invisible(lapply(list(
  main_wd, macs_wd, scale_wd, deseq_wd, output_wd, homer_wd,
  seq_stats_wd, rep_overlap_wd, pre_deseq_reps_wd, homer_r_wd,
  merged_norm_wd, deseq_dds_folder, deseq_dds_folder_reps_overlap,
  scripts_wd, snapshots_wd
), create_dir))

# ---- Option B: ensure Function_list.r exists (minimal placeholder) -----------
.ensure_function_list <- function(outfile = file.path(scripts_wd, "Function_list.r")){
  if (!file.exists(outfile)) {
    dir.create(dirname(outfile), recursive = TRUE, showWarnings = FALSE)
    writeLines(c(
      "# Function_list.r (auto-created placeholder)",
      "create_dir <- function(path){ if(!dir.exists(path)) dir.create(path, recursive = TRUE); invisible(path) }",
      "stamp <- function(path, tag){",
      "  if (missing(tag)) tag <- if (exists('current_date', inherits = TRUE)) get('current_date', inherits = TRUE) else toupper(format(Sys.Date(), '%d%b%y'))",
      "  dirp <- dirname(path); base <- basename(path);",
      "  ext <- tools::file_ext(base); stem <- if (nzchar(ext)) tools::file_path_sans_ext(base) else base;",
      "  file.path(dirp, if (nzchar(ext)) paste0(stem, '_', tag, '.', ext) else paste0(stem, '_', tag))",
      "}",
      ""
    ), outfile)
    message("🛠  Created Function_list.r: ", outfile)
  } else {
    message("ℹ️ Function_list.r already exists: ", outfile)
  }
}
.ensure_function_list()

# Publish default scripts location so future helpers save into scripts/
options(project.scripts_wd = scripts_wd)

# ---- Write dynamic 00_auto_paths.R -------------------------------------------
.write_paths_R <- function(outfile = file.path(scripts_wd, "00_auto_paths.R")) {
  lines <- c(
    "# --- 00_auto_paths.R (dynamic date; source this in every script) ---------",
    "tz <- getOption('project.tz', 'America/Los_Angeles')",
    "override <- getOption('project.date_override', Sys.getenv('PROJECT_DATE', ''))",
    "",
    "project_current_date <- function(){",
    "  d <- if (nzchar(override)) as.Date(override) else as.Date(format(as.POSIXct(Sys.time(), tz = tz), '%Y-%m-%d'))",
    "  toupper(format(d, '%d%b%y'))",
    "}",
    "current_date <- project_current_date()",
    "",
    paste0("main_wd  <- \"", main_wd, "\""),
    paste0("macs_wd  <- \"", macs_wd, "\""),
    paste0("scale_wd <- \"", scale_wd, "\""),
    paste0("deseq_wd <- \"", deseq_wd, "\""),
    "",
    "# Date-derived folders (always 'today' when this file is sourced)",
    "output_wd         <- file.path(deseq_wd, current_date)",
    "homer_wd          <- file.path(deseq_wd, 'Homer', current_date)",
    "seq_stats_wd      <- file.path(main_wd, 'seq_stats')",
    "rep_overlap_wd    <- file.path(output_wd, 'replicate_normalized')",
    "pre_deseq_reps_wd <- file.path(rep_overlap_wd, 'pre_DESeq_counts')",
    "homer_r_wd        <- file.path(rep_overlap_wd, 'HOMER_post_processing')",
    "merged_norm_wd    <- file.path(output_wd, 'merged_normalized')",
    "deseq_dds_folder              <- file.path(merged_norm_wd, 'DESeq_dds_output')",
    "deseq_dds_folder_reps_overlap <- file.path(rep_overlap_wd, 'DESeq_dds_output_reps_overlap')",
    "scripts_wd   <- file.path(main_wd, 'scripts')",
    "snapshots_wd <- file.path(scripts_wd, '_snapshots', current_date)",
    paste0("file_a <- file.path(\"", scale_wd, "\", \"consensus_peaks_first_six_columns.txt\")"),
    paste0("file_b <- file.path(\"", scale_wd, "\", \"consensus_peaks_sorted_bam_columns.txt\")"),
    "",
    "# Helpers (idempotent)",
    "create_dir <- function(path){ if(!dir.exists(path)) dir.create(path, recursive = TRUE); invisible(path) }",
    "stamp <- function(path, tag = current_date){",
    "  dirp <- dirname(path); base <- basename(path);",
    "  ext  <- tools::file_ext(base);",
    "  stem <- if (nzchar(ext)) tools::file_path_sans_ext(base) else base;",
    "  dated <- if (nzchar(ext)) paste0(stem, '_', tag, '.', ext) else paste0(stem, '_', tag);",
    "  file.path(dirp, dated)",
    "}",
    "",
    "options(project.scripts_wd = scripts_wd)"
  )
  writeLines(lines, con = outfile)
  message("Wrote auto-paths script (dynamic date): ", outfile)
}

# ---- Save paths snapshot ------------------------------------------------------
.save_paths_Rds <- function(outfile = file.path(main_wd, "paths.Rds")) {
  paths <- list(
    current_date = current_date,
    main_wd = main_wd,
    macs_wd = macs_wd,
    scale_wd = scale_wd,
    deseq_wd = deseq_wd,
    output_wd = output_wd,
    homer_wd = homer_wd,
    seq_stats_wd = seq_stats_wd,
    rep_overlap_wd = rep_overlap_wd,
    pre_deseq_reps_wd = pre_deseq_reps_wd,
    homer_r_wd = homer_r_wd,
    merged_norm_wd = merged_norm_wd,
    deseq_dds_folder = deseq_dds_folder,
    deseq_dds_folder_reps_overlap = deseq_dds_folder_reps_overlap,
    scripts_wd = scripts_wd,
    snapshots_wd = snapshots_wd,
    file_a = file_a,
    file_b = file_b
  )
  saveRDS(paths, outfile)
  message("Wrote paths RDS:        ", outfile)
}

# ---- Write canonical files ----------------------------------------------------
.write_paths_R(file.path(scripts_wd, "00_auto_paths.R"))
.save_paths_Rds(file.path(main_wd,   "paths.Rds"))

# Optional: keep a dated snapshot copy of 00_auto_paths.R
snap_auto <- file.path(snapshots_wd, paste0("00_auto_paths_", current_date, ".R"))
file.copy(file.path(scripts_wd, "00_auto_paths.R"), snap_auto, overwrite = TRUE)

# ---- Messages ----------------------------------------------------------------
message("✅ Directories ready under: ", main_wd, "/")
message("✅ Output date folder:      ", output_wd)
message("✅ Scripts folder:          ", scripts_wd)
message("✅ Snapshots folder:        ", snapshots_wd)
