### 03_normalized_counts.r (Fixed)
### Normalizes counts, applies ≥2 donor rule (fallback if none),
### and generates both scaled and DESeq2-ready counts (with proper join).

library(tidyverse)

# ────────────────────────────────────────────────
# Paths & Settings
# ────────────────────────────────────────────────
main_wd <- "/Users/brandiatteberry/Documents/Bioinformatics/ATACseq_July_2025"
macs_wd <- file.path(main_wd, "macs")
scale_wd <- file.path(main_wd, "scale")

date_tag <- toupper(format(Sys.Date(), "%d%b%y"))
output_dir <- file.path("/Users/brandiatteberry/Desktop/Bioinformatics/ATACseq_Nextflow/R", date_tag)
dir.create(output_dir, recursive=TRUE, showWarnings=FALSE)

boolean_file <- "/Users/brandiatteberry/Desktop/Bioinformatics/RBC_Lysis_Bioinformatics_training/consensus_peaks.mRp.clN.boolean.txt"

# Detect split count files
first_six_file <- file.path(macs_wd, "consensus_peaks_first_six_columns.txt")
bam_counts_file <- file.path(macs_wd, "consensus_peaks_sorted_bam_columns.txt")
if (!file.exists(first_six_file)) first_six_file <- file.path(scale_wd, "consensus_peaks_first_six_columns.txt")
if (!file.exists(bam_counts_file)) bam_counts_file <- file.path(scale_wd, "consensus_peaks_sorted_bam_columns.txt")

if (!file.exists(first_six_file) || !file.exists(bam_counts_file)) {
  stop("Missing featureCounts split files in macs/scale folders.")
}

num_overlaps <- 2

# ────────────────────────────────────────────────
# Load Data
# ────────────────────────────────────────────────
message("Loading data...")
boolean_df <- read.table(boolean_file, header=TRUE, sep="\t", check.names=FALSE)
data_a <- read.table(first_six_file, header=TRUE)
data_b <- read.table(bam_counts_file, header=TRUE, check.names=FALSE)
rownames(data_b) <- data_a$Geneid

# ────────────────────────────────────────────────
# Normalize Counts (Scaled)
# ────────────────────────────────────────────────
sample_totals <- colSums(data_b)
scale_factors <- round(sample_totals / max(sample_totals), 5)

scaled_counts <- map_dfc(names(scale_factors), function(s) {
  round(100 * data_b[[s]] * scale_factors[s])
})
colnames(scaled_counts) <- names(scale_factors)

data_b_df <- data.frame(
  Chr=data_a$Chr, Start=data_a$Start, End=data_a$End,
  scaled_counts, check.names=FALSE
)
message("Rows in scaled counts: ", nrow(data_b_df))

# ────────────────────────────────────────────────
# Boolean Filtering (≥2 donors or fallback)
# ────────────────────────────────────────────────
bool_treated_data <- boolean_df %>%
  select(chr, start, end, ends_with(".bool")) %>%
  rename(Chr=chr, Start=start, End=end)

all_bool_cols <- grep("\\.bool$", colnames(bool_treated_data), value=TRUE)
base_timepoints <- unique(gsub("^\\d+_", "", gsub("\\.mRp\\.clN\\.bool$", "", all_bool_cols)))

bool_treated_overlaps <- NULL
for (tp in base_timepoints) {
  tp_cols <- grep(tp, colnames(bool_treated_data), value=TRUE)
  if (length(tp_cols) == 0) next

  tp_df <- bool_treated_data %>%
    select(Chr, Start, End, all_of(tp_cols)) %>%
    mutate(Overlaps = rowSums(across(all_of(tp_cols)) == TRUE))

  if (any(tp_df$Overlaps >= num_overlaps)) {
    tp_df <- tp_df %>% filter(Overlaps >= num_overlaps) %>% mutate(FilterFlag="PASS_2of3")
  } else {
    tp_df <- tp_df %>% filter(Overlaps > 0) %>% mutate(FilterFlag="FALLBACK_ANY")
  }

  bool_treated_overlaps <- bind_rows(bool_treated_overlaps, tp_df %>% select(Chr, Start, End, FilterFlag))
}

# ────────────────────────────────────────────────
# Merge Counts + Boolean Filters (Join on Chr/Start/End)
# ────────────────────────────────────────────────
filtered_counts <- inner_join(data_b_df, bool_treated_overlaps, by=c("Chr","Start","End"))

# Add Interval ID (for downstream tracking)
filtered_counts <- filtered_counts %>%
  mutate(Interval = paste(Chr, Start, End, sep=":")) %>%
  relocate(Interval, .before=Chr)

# Integer counts for DESeq2
integer_counts <- filtered_counts %>%
  mutate(across(where(is.numeric), as.integer))

# Split
pass_counts <- filtered_counts %>% filter(FilterFlag=="PASS_2of3")
fallback_counts <- filtered_counts %>% filter(FilterFlag=="FALLBACK_ANY")
pass_counts_int <- integer_counts %>% filter(FilterFlag=="PASS_2of3")
fallback_counts_int <- integer_counts %>% filter(FilterFlag=="FALLBACK_ANY")

message("Filtered totals: ", nrow(filtered_counts))
print(table(filtered_counts$FilterFlag))

# ────────────────────────────────────────────────
# Save Outputs (Scaled + Integer)
# ────────────────────────────────────────────────
write.table(filtered_counts,
            file=file.path(output_dir, paste0("consensus_peaks_sorted_with_", num_overlaps, "_overlaps_", date_tag, ".txt")),
            sep="\t", quote=FALSE, row.names=FALSE)

write.table(pass_counts,
            file=file.path(output_dir, paste0("consensus_peaks_PASS_2of3_", date_tag, ".txt")),
            sep="\t", quote=FALSE, row.names=FALSE)

write.table(fallback_counts,
            file=file.path(output_dir, paste0("consensus_peaks_FALLBACK_ANY_", date_tag, ".txt")),
            sep="\t", quote=FALSE, row.names=FALSE)

write.table(pass_counts_int,
            file=file.path(output_dir, paste0("consensus_peaks_PASS_2of3_DESeq2_", date_tag, ".txt")),
            sep="\t", quote=FALSE, row.names=FALSE)

write.table(fallback_counts_int,
            file=file.path(output_dir, paste0("consensus_peaks_FALLBACK_ANY_DESeq2_", date_tag, ".txt")),
            sep="\t", quote=FALSE, row.names=FALSE)

message("✅ Wrote all scaled + DESeq2 integer counts to: ", output_dir)
